#!/bin/bash

# Script pour d√©marrer le serveur de production en arr√™tant d'abord les serveurs en cours

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier si un serveur est en cours sur un port
check_server_running() {
    local port=$1
    local server_type=$2
    
    log_info "V√©rification du $server_type sur le port $port..."
    
    # Chercher les processus utilisant le port
    local pids=$(lsof -ti:$port 2>/dev/null || true)
    
    if [ -n "$pids" ]; then
        log_warning "$server_type d√©j√† en cours sur le port $port"
        return 0  # Serveur en cours
    else
        log_info "Aucun $server_type trouv√© sur le port $port"
        return 1  # Serveur non en cours
    fi
}

# Fonction pour arr√™ter les processus sur un port
stop_process_on_port() {
    local port=$1
    local process_name=$2
    
    log_info "Arr√™t de $process_name sur le port $port..."
    
    # Chercher les processus utilisant le port
    local pids=$(lsof -ti:$port 2>/dev/null || true)
    
    if [ -n "$pids" ]; then
        log_warning "Arr√™t de $process_name sur le port $port..."
        
        # Arr√™ter les processus
        for pid in $pids; do
            log_info "Arr√™t du processus $pid..."
            kill -TERM $pid 2>/dev/null || true
            
            # Attendre un peu puis forcer si n√©cessaire
            sleep 2
            if kill -0 $pid 2>/dev/null; then
                log_warning "Processus $pid encore actif, arr√™t forc√©..."
                kill -KILL $pid 2>/dev/null || true
            fi
        done
        
        # V√©rifier que le port est libre
        sleep 1
        if lsof -ti:$port >/dev/null 2>&1; then
            log_error "Impossible de lib√©rer le port $port"
            return 1
        else
            log_success "Port $port lib√©r√©"
        fi
    else
        log_info "Aucun processus trouv√© sur le port $port"
    fi
}

# Fonction pour arr√™ter tous les serveurs Next.js
stop_all_next_servers() {
    log_info "Arr√™t de tous les serveurs Next.js..."
    
    # Chercher les processus Next.js
    local next_pids=$(pgrep -f "next.*dev\|next.*start" 2>/dev/null || true)
    
    if [ -n "$next_pids" ]; then
        log_warning "Arr√™t des serveurs Next.js en cours..."
        
        for pid in $next_pids; do
            log_info "Arr√™t du processus Next.js $pid..."
            kill -TERM $pid 2>/dev/null || true
        done
        
        # Attendre un peu puis forcer si n√©cessaire
        sleep 3
        next_pids=$(pgrep -f "next.*dev\|next.*start" 2>/dev/null || true)
        if [ -n "$next_pids" ]; then
            log_warning "Arr√™t forc√© des processus Next.js restants..."
            for pid in $next_pids; do
                kill -KILL $pid 2>/dev/null || true
            done
        fi
        
        log_success "Tous les serveurs Next.js arr√™t√©s"
    else
        log_info "Aucun serveur Next.js trouv√©"
    fi
}

# Fonction pour pr√©-build de production
pre_build_prod() {
    log_info "üî® Pr√©-build de production..."
    
    # Aller dans le r√©pertoire prod
    cd prod
    
    # V√©rifier que le r√©pertoire existe
    if [ ! -f "package.json" ]; then
        log_error "R√©pertoire prod non trouv√© ou package.json manquant"
        exit 1
    fi
    
    # Toujours reconstruire en production pour s'assurer que tout est √† jour
    log_warning "Reconstruction de l'application de production..."
    npm run build
    log_success "Build de production termin√©"
    
    # Retourner au r√©pertoire racine
    cd ..
}

# Fonction principale
main() {
    log_info "üöÄ D√©marrage du serveur de production"
    log_info "====================================="
    
    # V√©rifier si le serveur prod est d√©j√† en cours
    if check_server_running 3000 "serveur de production"; then
        log_info "üîÑ Red√©marrage du serveur de production..."
    else
        log_info "üÜï D√©marrage d'un nouveau serveur de production..."
    fi
    
    # Arr√™ter tous les processus Next.js (m√©thode simple et efficace)
    log_warning "Arr√™t des processus Next.js..."
    pkill -f "next.*start" 2>/dev/null || true
    sleep 2
    pkill -9 -f "next.*start" 2>/dev/null || true
    
    # Attendre un peu pour s'assurer que tout est arr√™t√©
    sleep 2
    
    # Supprimer le dossier .next pour forcer un rebuild complet
    log_info "üßπ Nettoyage du build pr√©c√©dent..."
    if [ -d "prod/.next" ]; then
        rm -rf prod/.next
        log_success "Dossier .next supprim√©"
    else
        log_info "Aucun dossier .next trouv√©"
    fi
    
    log_info "D√©marrage du serveur de production..."
    
    # Pr√©-build de production
    pre_build_prod
    
    # Aller dans le r√©pertoire prod et d√©marrer
    cd prod
    
    # D√©marrer le serveur de production
    log_success "D√©marrage de Next.js en mode production..."
    npm run start
}

# Gestion des erreurs
trap 'log_error "Erreur survenue. Arr√™t du script."; exit 1' ERR

# Ex√©cution
main "$@"
