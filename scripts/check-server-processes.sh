#!/bin/bash

# Script pour v√©rifier tous les processus de serveur actuellement en cours d'ex√©cution
# Auteur: Assistant IA
# Date: $(date)

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions de log
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${PURPLE}üîç $1${NC}"
}

# Fonction pour v√©rifier les processus Next.js
check_nextjs_processes() {
    log_header "V√©rification des processus Next.js"
    
    local next_processes=$(ps aux | grep -E "(next dev|next start)" | grep -v grep || true)
    
    if [ -z "$next_processes" ]; then
        log_info "Aucun processus Next.js trouv√©"
    else
        log_info "Processus Next.js en cours d'ex√©cution :"
        echo "$next_processes" | while read -r line; do
            echo "  $line"
        done
    fi
}

# Fonction pour v√©rifier les processus Node.js
check_nodejs_processes() {
    log_header "V√©rification des processus Node.js"
    
    local node_processes=$(ps aux | grep -E "node.*(dev|prod)" | grep -v grep || true)
    
    if [ -z "$node_processes" ]; then
        log_info "Aucun processus Node.js sp√©cifique trouv√©"
    else
        log_info "Processus Node.js en cours d'ex√©cution :"
        echo "$node_processes" | while read -r line; do
            echo "  $line"
        done
    fi
}

# Fonction pour v√©rifier les ports utilis√©s
check_ports() {
    log_header "V√©rification des ports utilis√©s"
    
    local ports=("3000" "3001" "3002" "3003")
    
    for port in "${ports[@]}"; do
        local process=$(lsof -i :$port 2>/dev/null | grep LISTEN || true)
        
        if [ -z "$process" ]; then
            log_info "Port $port: Libre"
        else
            log_warning "Port $port: Utilis√© par :"
            echo "$process" | while read -r line; do
                echo "  $line"
            done
        fi
    done
}

# Fonction pour v√©rifier les processus par PID
check_processes_by_pid() {
    log_header "V√©rification des processus par PID"
    
    # Chercher les PIDs des processus Next.js
    local pids=$(pgrep -f "(next dev|next start)" 2>/dev/null || true)
    
    if [ -z "$pids" ]; then
        log_info "Aucun PID de processus Next.js trouv√©"
    else
        log_info "PIDs des processus Next.js :"
        for pid in $pids; do
            local process_info=$(ps -p $pid -o pid,ppid,cmd --no-headers 2>/dev/null || true)
            if [ -n "$process_info" ]; then
                echo "  PID $pid: $process_info"
            fi
        done
    fi
}

# Fonction pour v√©rifier les processus dans les r√©pertoires sp√©cifiques
check_directory_processes() {
    log_header "V√©rification des processus dans les r√©pertoires dev/prod"
    
    local directories=("dev" "prod")
    
    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            log_info "R√©pertoire $dir :"
            
            # Chercher les processus qui travaillent dans ce r√©pertoire
            local dir_processes=$(ps aux | grep "$(pwd)/$dir" | grep -v grep || true)
            
            if [ -z "$dir_processes" ]; then
                log_info "  Aucun processus trouv√© pour $dir"
            else
                echo "$dir_processes" | while read -r line; do
                    echo "  $line"
                done
            fi
        else
            log_warning "R√©pertoire $dir n'existe pas"
        fi
    done
}

# Fonction pour v√©rifier les processus npm
check_npm_processes() {
    log_header "V√©rification des processus npm"
    
    local npm_processes=$(ps aux | grep -E "npm.*(dev|start)" | grep -v grep || true)
    
    if [ -z "$npm_processes" ]; then
        log_info "Aucun processus npm trouv√©"
    else
        log_info "Processus npm en cours d'ex√©cution :"
        echo "$npm_processes" | while read -r line; do
            echo "  $line"
        done
    fi
}

# Fonction pour v√©rifier l'utilisation m√©moire et CPU
check_system_resources() {
    log_header "V√©rification des ressources syst√®me"
    
    # M√©moire utilis√©e par les processus Node.js
    local node_memory=$(ps aux | grep -E "(node|next)" | grep -v grep | awk '{sum+=$6} END {print sum/1024 " MB"}' || echo "0 MB")
    log_info "M√©moire utilis√©e par les processus Node.js : $node_memory"
    
    # CPU utilis√© par les processus Node.js
    local node_cpu=$(ps aux | grep -E "(node|next)" | grep -v grep | awk '{sum+=$3} END {print sum "%"}' || echo "0%")
    log_info "CPU utilis√© par les processus Node.js : $node_cpu"
    
    # M√©moire totale du syst√®me
    local total_memory=$(free -m | awk 'NR==2{printf "%.1f GB", $2/1024}')
    local used_memory=$(free -m | awk 'NR==2{printf "%.1f GB", $3/1024}')
    local memory_percent=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    log_info "M√©moire syst√®me : $used_memory / $total_memory ($memory_percent%)"
}

# Fonction pour v√©rifier les logs des processus
check_process_logs() {
    log_header "V√©rification des logs r√©cents"
    
    # Chercher les fichiers de log r√©cents
    local log_files=$(find . -name "*.log" -type f -mtime -1 2>/dev/null || true)
    
    if [ -z "$log_files" ]; then
        log_info "Aucun fichier de log r√©cent trouv√©"
    else
        log_info "Fichiers de log r√©cents :"
        echo "$log_files" | while read -r file; do
            echo "  $file"
        done
    fi
}

# Fonction pour v√©rifier les processus zombies
check_zombie_processes() {
    log_header "V√©rification des processus zombies"
    
    local zombies=$(ps aux | grep -E "Z" | grep -v grep || true)
    
    if [ -z "$zombies" ]; then
        log_success "Aucun processus zombie trouv√©"
    else
        log_warning "Processus zombies d√©tect√©s :"
        echo "$zombies" | while read -r line; do
            echo "  $line"
        done
    fi
}

# Fonction principale
main() {
    echo -e "${CYAN}================================${NC}"
    echo -e "${CYAN}  V√âRIFICATION DES PROCESSUS   ${NC}"
    echo -e "${CYAN}================================${NC}"
    echo ""
    
    # V√©rifications
    check_nextjs_processes
    echo ""
    
    check_nodejs_processes
    echo ""
    
    check_npm_processes
    echo ""
    
    check_ports
    echo ""
    
    check_processes_by_pid
    echo ""
    
    check_directory_processes
    echo ""
    
    check_system_resources
    echo ""
    
    check_zombie_processes
    echo ""
    
    check_process_logs
    echo ""
    
    echo -e "${CYAN}================================${NC}"
    log_success "V√©rification termin√©e"
    echo -e "${CYAN}================================${NC}"
}

# Ex√©cution du script
main "$@"
