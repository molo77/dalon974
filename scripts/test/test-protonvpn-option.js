// Test de l'option LBC_USE_PROTONVPN
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testProtonVPNOption() {
  console.log('üß™ Test de l\'option LBC_USE_PROTONVPN...\n');
  
  try {
    // Test 1: ProtonVPN activ√©
    console.log('üîå Test 1: ProtonVPN activ√© (LBC_USE_PROTONVPN=true)');
    process.env.LBC_USE_PROTONVPN = 'true';
    
    // Simuler le comportement du script
    const useProtonVPN = (process.env.LBC_USE_PROTONVPN || 'true').toLowerCase() === 'true';
    console.log('   ‚Ä¢ LBC_USE_PROTONVPN =', process.env.LBC_USE_PROTONVPN);
    console.log('   ‚Ä¢ R√©sultat:', useProtonVPN ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©');
    
    // Test 2: ProtonVPN d√©sactiv√©
    console.log('\nüîå Test 2: ProtonVPN d√©sactiv√© (LBC_USE_PROTONVPN=false)');
    process.env.LBC_USE_PROTONVPN = 'false';
    
    const useProtonVPN2 = (process.env.LBC_USE_PROTONVPN || 'true').toLowerCase() === 'true';
    console.log('   ‚Ä¢ LBC_USE_PROTONVPN =', process.env.LBC_USE_PROTONVPN);
    console.log('   ‚Ä¢ R√©sultat:', useProtonVPN2 ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©');
    
    // Test 3: Variable non d√©finie (d√©faut)
    console.log('\nüîå Test 3: Variable non d√©finie (d√©faut)');
    delete process.env.LBC_USE_PROTONVPN;
    
    const useProtonVPN3 = (process.env.LBC_USE_PROTONVPN || 'true').toLowerCase() === 'true';
    console.log('   ‚Ä¢ LBC_USE_PROTONVPN =', process.env.LBC_USE_PROTONVPN || 'undefined');
    console.log('   ‚Ä¢ R√©sultat:', useProtonVPN3 ? '‚úÖ Activ√© (d√©faut)' : '‚ùå D√©sactiv√©');
    
    // Test 4: Valeurs invalides
    console.log('\nüîå Test 4: Valeurs invalides');
    const testValues = ['0', 'no', 'false', 'FALSE', 'False', 'off', 'disabled'];
    
    for (const value of testValues) {
      process.env.LBC_USE_PROTONVPN = value;
      const result = (process.env.LBC_USE_PROTONVPN || 'true').toLowerCase() === 'true';
      console.log(`   ‚Ä¢ LBC_USE_PROTONVPN = "${value}" ‚Üí ${result ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}`);
    }
    
    console.log('\n‚úÖ Tests termin√©s avec succ√®s !');
    console.log('\nüí° Utilisation :');
    console.log('   ‚Ä¢ Pour activer ProtonVPN:  LBC_USE_PROTONVPN=true');
    console.log('   ‚Ä¢ Pour d√©sactiver ProtonVPN: LBC_USE_PROTONVPN=false');
    console.log('   ‚Ä¢ Par d√©faut: ProtonVPN est activ√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testProtonVPNOption();
