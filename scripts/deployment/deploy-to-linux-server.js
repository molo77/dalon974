const { execSync } = require('child_process');
const path = require('path');

// Configuration
const SERVER_HOST = process.argv[2] || "molo:Bulgroz%401977@192.168.1.200";
const PROJECT_DIR = process.argv[3] || "/data/dalon974";
const LOCAL_DIR = ".";

console.log('üöÄ D√©ploiement de Dalon974 vers', SERVER_HOST + ':' + PROJECT_DIR);

try {
  // 1. V√©rifier que nous sommes dans le bon r√©pertoire
  console.log('üìÅ V√©rification du r√©pertoire...');
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (!require('fs').existsSync(packageJsonPath)) {
    throw new Error('package.json non trouv√©. Assurez-vous d\'√™tre dans le r√©pertoire du projet.');
  }

  // 2. Construire le projet localement
  console.log('üì¶ Construction du projet...');
  execSync('npm run build', { stdio: 'inherit' });

  // 3. Cr√©er un fichier de sauvegarde de la base de donn√©es actuelle
  console.log('üíæ Sauvegarde de la base de donn√©es...');
  try {
    execSync(`ssh ${SERVER_HOST} "cd ${PROJECT_DIR} && npm run export-database"`, { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de sauvegarder la base de donn√©es');
  }

  // 4. Synchroniser les fichiers vers le serveur
  console.log('üì§ Synchronisation des fichiers...');
  const rsyncCommand = `rsync -avz --exclude 'node_modules' --exclude '.next' --exclude '.git' --exclude 'logs' --exclude 'public/uploads' --exclude '.env.local' --exclude '.env.production' ${LOCAL_DIR}/ ${SERVER_HOST}:${PROJECT_DIR}/`;
  execSync(rsyncCommand, { stdio: 'inherit' });

  // 5. Se connecter au serveur et installer les d√©pendances
  console.log('üîß Installation des d√©pendances sur le serveur...');
  execSync(`ssh ${SERVER_HOST} "cd ${PROJECT_DIR} && npm install --production"`, { stdio: 'inherit' });

  // 6. Appliquer les migrations de base de donn√©es
  console.log('üóÑÔ∏è  Application des migrations de base de donn√©es...');
  execSync(`ssh ${SERVER_HOST} "cd ${PROJECT_DIR} && npx prisma migrate deploy"`, { stdio: 'inherit' });

  // 7. G√©n√©rer le client Prisma
  console.log('üîå G√©n√©ration du client Prisma...');
  execSync(`ssh ${SERVER_HOST} "cd ${PROJECT_DIR} && npx prisma generate"`, { stdio: 'inherit' });

  // 8. Red√©marrer le service (si systemd est utilis√©)
  console.log('üîÑ Red√©marrage du service...');
  try {
    execSync(`ssh ${SERVER_HOST} "sudo systemctl restart dalon974"`, { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de red√©marrer le service (peut-√™tre pas configur√©)');
  }

  // 9. V√©rifier le statut
  console.log('‚úÖ V√©rification du statut...');
  try {
    execSync(`ssh ${SERVER_HOST} "cd ${PROJECT_DIR} && npm run health-check"`, { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de v√©rifier la sant√© de l\'application');
  }

  console.log('üéâ D√©ploiement termin√© !');
  console.log('üìç Application disponible sur: http://' + SERVER_HOST.split('@')[1] + ':3000');

} catch (error) {
  console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
  process.exit(1);
}
