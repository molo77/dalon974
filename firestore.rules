rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    // Vérifie si le user connecté est le propriétaire du doc (via uid)
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Admin basé sur le doc users/{uid}.role === "admin"
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Empêche d’écrire un uid différent de l’ID du document
    function uidMatchesPath(pathUid) {
      return !('uid' in request.resource.data) || request.resource.data.uid == pathUid;
    }

    // Annonces
    match /annonces/{id} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || isOwner(resource.data.uid);
    }

    // Profils colocataires
    match /colocProfiles/{uid} {
      // Lecture publique
      allow read: if true;

      // Création: l'utilisateur pour lui-même, uid du payload cohérent
      allow create: if isOwner(uid) && uidMatchesPath(uid);

      // Mise à jour: propriétaire ou admin, uid du payload cohérent
      allow update: if (isOwner(uid) || isAdmin()) && uidMatchesPath(uid);

      // Suppression: propriétaire ou admin
      allow delete: if isOwner(uid) || isAdmin();
    }

    // Messagerie
    match /messages/{id} {
      // Lecture: seulement participants (expéditeur / propriétaire de l’annonce) ou admin
      allow read: if isSignedIn() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.annonceOwnerId == request.auth.uid ||
        isAdmin()
      );

      // Création: expéditeur authentifié (validation minimale)
      allow create: if isSignedIn() &&
        request.resource.data.fromUserId == request.auth.uid;

      // Modif/Suppression: admin uniquement
      allow update, delete: if isAdmin();
    }

    // Utilisateurs
    match /users/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create: if isOwner(uid) || isAdmin();
      allow update: if isOwner(uid) || isAdmin();
      allow delete: if isAdmin();
    }

    // Verrouillage par défaut
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

