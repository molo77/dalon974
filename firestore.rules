rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    // Créateur du doc = champ uid sur le doc
    function isOwner(resourceUid) {
      return isSignedIn() && resourceUid == request.auth.uid;
    }

    // Lecture publique des listes
    match /annonces/{id} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.uid) || isAdmin();
    }

    match /colocataires/{id} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.uid) || isAdmin();
    }

    // Messagerie: visibilité stricte
    match /messages/{id} {
      allow read: if isSignedIn() &&
        (
          resource.data.annonceOwnerId == request.auth.uid ||
          resource.data.fromUserId == request.auth.uid
        );
      allow create: if isSignedIn() &&
        request.resource.data.fromUserId == request.auth.uid &&
        // validations basiques
        request.resource.data.annonceId is string &&
        request.resource.data.annonceOwnerId is string &&
        request.resource.data.fromEmail is string &&
        request.resource.data.content is string &&
        request.resource.data.createdAt != null;
      allow update, delete: if false; // adapter si nécessaire
    }

    // Users: lecture/écriture restreinte (admin uniquement)
    match /users/{uid} {
      allow read, write: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
    }
  }
}
          request.resource.data.email == resource.data.email // email immuable ici
        )
        ||
        // Admin global
        isAdmin()
      );

      // Delete: admin uniquement
      allow delete: if isAdmin();
    }

    // ANNONCES COLLECTION
    match /annonces/{annonceId} {

      // Lecture publique
      allow get, list: if true;

      // Create: utilisateur connecté, ownership cohérent
      allow create: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userEmail == request.auth.token.email
        && validateAnnonce(request.resource.data);

      // Update: propriétaire ou admin + validation
      allow update: if isSignedIn()
        && (resource.data.userId == request.auth.uid || isAdmin())
        && validateAnnonce(request.resource.data);

      // Delete: propriétaire ou admin
      allow delete: if isSignedIn()
        && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // MESSAGES COLLECTION
    match /messages/{msgId} {

      // Lecture: seulement participants (expéditeur ou destinataire annonceOwner) ou admin
      allow get: if isSignedIn() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.annonceOwnerId == request.auth.uid ||
        isAdmin()
      );

      // Liste: filtrée par propriétaire ou expéditeur (requiert règle côté requête pour where)
      allow list: if isSignedIn();

      // Create: expéditeur authentifié, cohérence champs
      allow create: if isSignedIn()
        && request.resource.data.fromUserId == request.auth.uid
        && isString(request.resource.data.content)
        && request.resource.data.content.size() > 0
        && request.resource.data.annonceId is string
        && request.resource.data.annonceOwnerId is string
        && request.resource.data.fromEmail == request.auth.token.email
        && request.resource.data.createdAt == request.time;

      // Update / Delete: interdit (immutable) sauf admin
      allow update, delete: if isAdmin();
    }

    // (OPTIONNEL) AUTRES COLLECTIONS – verrouillage par défaut
    match /{document=**} {
      allow read, write: if false;
    }

    // ----- VALIDATION FONCTIONS -----
    function validateAnnonce(data) {
      return
        data.titre is string
        && data.ville is string
        && (!('prix' in data) || (data.prix is number && data.prix >= 0))
        && (!('surface' in data) || (data.surface is number && data.surface >= 0))
        && (!('nbChambres' in data) || (data.nbChambres is number && data.nbChambres >= 0))
        && optionalString('description')
        && optionalString('equipements')
        && data.userId is string
        && data.userEmail is string;
    }
  
