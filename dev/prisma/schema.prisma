generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  password        String?
  name            String?
  role            String?
  providerId      String?
  displayName     String?
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?    @db.Timestamp(6)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  blocksReceived  UserBlock[]  @relation("UserBlocked")
  blocksMade      UserBlock[]  @relation("UserBlocks")
  reportsReceived UserReport[] @relation("UserReported")
  reportsMade     UserReport[] @relation("UserReports")
  favorites       Favorite[]
}

model ColocProfile {
  id             String    @id
  userId         String?
  title          String?
  nom            String?
  ville          String?
  budget         Int?
  age            Int?
  profession     String?
  description    String?   @db.Text
  imageUrl       String?
  photos         Json?
  mainPhotoIdx   Int?
  communesSlugs  Json?
  zones          Json?
  createdAt      DateTime? @db.Timestamp(6)
  updatedAt      DateTime? @db.Timestamp(6)
  bioCourte      String?
  genre          String?
  langues        Json?
  instagram      String?
  telephone      String?
  dateDispo      String?
  prefGenre      String?
  prefAgeMin     Int?
  prefAgeMax     Int?
  accepteFumeurs Boolean?
  accepteAnimaux Boolean?
  rythme         String?
  proprete       String?
  sportif        Boolean?
  vegetarien     Boolean?
  soirees        Boolean?
  musique        String?
  fumeur         Boolean?
  animaux        Boolean?
  quartiers      String?
  interets       Json?
  codePostal     String?
}

model Annonce {
  id                 String    @id
  userId             String?
  title              String?
  description        String?   @db.Text
  imageUrl           String?
  photos             Json?
  mainPhotoIdx       Int?
  ville              String?
  prix               Int?
  surface            Int?
  nbChambres         Int?
  equipements        String?
  typeBien           String?
  meuble             Boolean?
  nbPieces           Int?
  nbSdb              Int?
  natureBien         String?
  caracteristiques   String?
  exposition         String?
  exterieur          String?
  placesParking      Int?
  disponibleAPartir  String?
  typeLocation       String?
  nombreColocataires Int?
  statutFumeur       String?
  createdAt          DateTime? @db.Timestamp(6)
  updatedAt          DateTime? @db.Timestamp(6)
  source             String?
}

model ScraperSetting {
  key       String   @id
  value     String?
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model AdUnit {
  id                  String    @id @default(uuid())
  name                String
  placementKey        String
  slot                String
  format              String?
  fullWidthResponsive Boolean   @default(true)
  height              Int?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now()) @db.Timestamp(6)
  updatedAt           DateTime? @db.Timestamp(6)

  @@index([placementKey])
  @@index([isActive])
}

model Message {
  id              String    @id @default(uuid())
  annonceId       String?
  annonceOwnerId  String?
  senderId        String?
  senderEmail     String?
  content         String    @db.Text
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime? @db.Timestamp(6)
  conversationId  String?
  isRead          Boolean   @default(false)
  parentMessageId String?
  readAt          DateTime? @db.Timestamp(6)

  @@index([annonceId])
  @@index([annonceOwnerId])
  @@index([senderId])
  @@index([conversationId])
  @@index([parentMessageId])
}

model ConversationDeletion {
  id             String   @id @default(uuid())
  conversationId String
  userId         String
  deletedAt      DateTime @default(now()) @db.Timestamp(6)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
}

model UserBlock {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  blockedAt DateTime @default(now()) @db.Timestamp(6)
  reason    String?
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id])
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model UserReport {
  id          String    @id @default(uuid())
  reporterId  String
  reportedId  String
  reason      String
  description String?   @db.Text
  status      String    @default("pending")
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  reviewedAt  DateTime? @db.Timestamp(6)
  reviewedBy  String?
  reviewNotes String?   @db.Text
  reported    User      @relation("UserReported", fields: [reportedId], references: [id])
  reporter    User      @relation("UserReports", fields: [reporterId], references: [id])

  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
  @@index([createdAt])
}

model ScraperRun {
  id                 String    @id
  startedAt          DateTime  @default(now()) @db.Timestamp(6)
  finishedAt         DateTime? @db.Timestamp(6)
  status             String?
  totalCollected     Int?
  totalUpserts       Int?
  detailLimit        Int?
  rawLog             String?   @db.LongText
  errorMessage       String?   @db.Text
  createdCount       Int?
  updatedCount       Int?
  skippedRecentCount Int?
  cooldownHours      Float?
  progress           Float?
  currentStep        String?
  currentMessage     String?
  childPid           Int?
  config             Json?
  createdAt          DateTime  @default(now()) @db.Timestamp(6)
  updatedAt          DateTime? @db.Timestamp(6)

  @@index([startedAt])
  @@index([status])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  itemType  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId, itemType])
  @@index([createdAt])
  @@index([itemId])
  @@index([itemType])
  @@index([userId])
}
