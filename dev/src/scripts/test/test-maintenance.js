// Script de test pour la page de maintenance
// Simule une base de donn√©es inaccessible

const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function testMaintenancePage() {
  console.log('üß™ Test de la page de maintenance...\n');
  
  try {
    // Test 1: V√©rifier que l'API de sant√© fonctionne
    console.log('1Ô∏è‚É£ Test de l\'API de sant√©...');
    const { stdout: healthResponse } = await execAsync('curl -s http://localhost:3000/api/health');
    console.log('‚úÖ API de sant√© accessible');
    console.log('üìã R√©ponse:', healthResponse);
    
    // Test 2: V√©rifier que la page de maintenance est accessible
    console.log('\n2Ô∏è‚É£ Test de la page de maintenance...');
    const { stdout: maintenanceResponse } = await execAsync('curl -s http://localhost:3000/maintenance');
    
    if (maintenanceResponse.includes('Maintenance en cours')) {
      console.log('‚úÖ Page de maintenance accessible');
    } else {
      console.log('‚ùå Page de maintenance non accessible');
      console.log('üìã R√©ponse:', maintenanceResponse.substring(0, 200) + '...');
    }
    
    // Test 3: V√©rifier les m√©tadonn√©es de la page
    console.log('\n3Ô∏è‚É£ Test des m√©tadonn√©es...');
    if (maintenanceResponse.includes('maintenance')) {
      console.log('‚úÖ M√©tadonn√©es correctes');
    } else {
      console.log('‚ö†Ô∏è M√©tadonn√©es manquantes');
    }
    
    console.log('\nüéâ Tests termin√©s avec succ√®s !');
    console.log('\nüí° Pour tester la redirection automatique :');
    console.log('1. Arr√™tez votre serveur de base de donn√©es');
    console.log('2. Acc√©dez √† http://localhost:3000');
    console.log('3. Vous devriez √™tre redirig√© vers /maintenance');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.log('\nüí° Assurez-vous que votre serveur Next.js est d√©marr√© sur le port 3000');
  }
}

// Fonction pour simuler une base de donn√©es inaccessible
async function simulateDatabaseDown() {
  console.log('üîß Simulation d\'une base de donn√©es inaccessible...\n');
  
  // Sauvegarder l'URL de base de donn√©es actuelle
  const originalDbUrl = process.env.DATABASE_URL;
  
  try {
    // Changer temporairement l'URL de base de donn√©es pour une URL invalide
    process.env.DATABASE_URL = 'mysql://invalid:invalid@localhost:3306/invalid';
    
    console.log('üìã URL de base de donn√©es temporairement modifi√©e');
    console.log('üîÑ Red√©marrez votre serveur Next.js pour tester');
    console.log('üåê Acc√©dez √† http://localhost:3000');
    console.log('üì± Vous devriez √™tre redirig√© vers la page de maintenance');
    
    console.log('\n‚è∞ Appuyez sur Ctrl+C pour restaurer l\'URL de base de donn√©es');
    
    // Attendre ind√©finiment
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    // Restaurer l'URL de base de donn√©es
    process.env.DATABASE_URL = originalDbUrl;
    console.log('\n‚úÖ URL de base de donn√©es restaur√©e');
  }
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--simulate-down')) {
  simulateDatabaseDown();
} else {
  testMaintenancePage();
}
